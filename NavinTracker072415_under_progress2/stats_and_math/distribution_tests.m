% by Andrew Gordus% w(1) = relative probab model 1 is correct% L(1) log-likelihood value for that function ...used to calc AIC and w % values = actual fitted parametersfunction [w L values] = distribution_tests(x)warning off all% f1(x) = Cx^-u, x>=a, i.e. powerlaw%f2(x) = kexp(-k*(x-a)), x>=a, i.e. exponential%f3(x) = bounded power law%f4(x) = bounded exponentn = length(x);a = min(x);c = max(x);beta = [a c n];values = zeros(4,1);%f1(x) = Cx^-u, x>=a, i.e. powerlaw C = min(x)u = 1-n/(n*log(a) - sum(log(x)));L(1) = n*log(u-1) + n*(u-1)*log(a) - u*sum(log(x));param(1) = 1;values(1,1) = u;%f2(x) = kexp(-k*(x-a)), x>=a, i.e. exponential k = ((sum(x)/n) - a)^-1;L(2) = n*log(k) + n*k*a - k*sum(x);param(2) = 1;values(2,1) = k;%f3(x) = bounded power lawutest = 2;u2 = fminsearch(@(u) delpowerdelu(x,utest,beta),2);L(3) = likepowerbound(x,u2,beta);param(3) = 1;values(3) = u2;%f4(x) = bounded exponentk2 = fminsearch(@(k1) delexpdelk(x,k1,beta),k);L(4) = likeexpbound(x,k2,beta);param(4) = 1;values(4) = k2;AIC = -2*L +2*param;del = AIC - ones(1,length(AIC))*min(AIC);wsum = sum(exp(-del/2));w = exp(-del/2)/wsum;return;endfunction y = delexpdelk(x,k,beta)a = beta(1);b = beta(2);n = beta(3);% y = n./k - n*((b*exp(-k*b) - a*exp(-k*a))./(exp(-k*a)-exp(-k*b))) - sum(x);y = abs(n./k - n*((b*exp(-k*b) - a*exp(-k*a))./(exp(-k*a)-exp(-k*b))) - sum(x));return;endfunction y = delpowerdelu(x,u,beta)a = beta(1);b = beta(2);n = beta(3);F = n*((a.^(1-u)-b.^(1-u))./(u-1));G = 1./(a.^(1-u) - b.^(1-u));H = ((u-1).*(b.^(1-u)*log(b) - a.^(1-u)*log(a)))./((a.^(1-u)-b.^(1-u)).^2);% y = -sum(log(x)) + F.*(G-H);y = abs(-sum(log(x)) + F.*(G-H));return;endfunction L = likeexpbound(x,k,beta)a = beta(1);b = beta(2);n = beta(3);L = n*log(k) - n*log(exp(-k*a) - exp(-k*b)) - k*sum(x);return;endfunction L = likepowerbound(x,u,beta)%powerbound is loglikelihood function for bounded powerlaw.a = beta(1);b = beta(2);n = beta(3);L = n*log((u-1)/(a^(1-u) - b^(1-u))) - u*sum(log(x));return;end